{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\chris\\\\OneDrive\\\\Coding\\\\Capstone\\\\Ecommerce\\\\03-frontend\\\\angular-ecommerce\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { from, lastValueFrom } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nexport class AuthInterceptorService {\n  constructor(oktaAuth) {\n    this.oktaAuth = oktaAuth;\n  }\n\n  intercept(request, next) {\n    return from(this.handleAccess(request, next));\n  }\n\n  handleAccess(request, next) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const theEndpoint = environment.HCLTechStoreUrl + '/orders';\n      const securedEndpoints = [theEndpoint];\n\n      if (securedEndpoints.some(url => request.urlWithParams.includes(url))) {\n        const accessToken = yield _this.oktaAuth.getAccessToken();\n        console.log(accessToken);\n        request = request.clone({\n          setHeaders: {\n            Authorization: \"Bearer \" + accessToken\n          }\n        });\n      } // return next.handle(request).toPromise();\n\n\n      const vari = lastValueFrom(next.handle(request));\n      return vari;\n    })();\n  }\n\n}\n\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(OKTA_AUTH));\n};\n\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/chris/OneDrive/Coding/Capstone/Ecommerce/03-frontend/angular-ecommerce/src/app/services/auth-interceptor.service.ts"],"names":["from","lastValueFrom","environment","i0","AuthInterceptorService","constructor","oktaAuth","intercept","request","next","handleAccess","theEndpoint","HCLTechStoreUrl","securedEndpoints","some","url","urlWithParams","includes","accessToken","getAccessToken","console","log","clone","setHeaders","Authorization","vari","handle","ɵfac","AuthInterceptorService_Factory","t","ɵɵinject","OKTA_AUTH","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,IAAT,EAAeC,aAAf,QAAoC,MAApC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,sBAAN,CAA6B;AAChCC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AACDC,EAAAA,SAAS,CAACC,OAAD,EAAUC,IAAV,EAAgB;AACrB,WAAOT,IAAI,CAAC,KAAKU,YAAL,CAAkBF,OAAlB,EAA2BC,IAA3B,CAAD,CAAX;AACH;;AACKC,EAAAA,YAAY,CAACF,OAAD,EAAUC,IAAV,EAAgB;AAAA;;AAAA;AAC9B,YAAME,WAAW,GAAGT,WAAW,CAACU,eAAZ,GAA8B,SAAlD;AACA,YAAMC,gBAAgB,GAAG,CAACF,WAAD,CAAzB;;AACA,UAAIE,gBAAgB,CAACC,IAAjB,CAAsBC,GAAG,IAAIP,OAAO,CAACQ,aAAR,CAAsBC,QAAtB,CAA+BF,GAA/B,CAA7B,CAAJ,EAAuE;AACnE,cAAMG,WAAW,SAAS,KAAI,CAACZ,QAAL,CAAca,cAAd,EAA1B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACAV,QAAAA,OAAO,GAAGA,OAAO,CAACc,KAAR,CAAc;AACpBC,UAAAA,UAAU,EAAE;AACRC,YAAAA,aAAa,EAAE,YAAYN;AADnB;AADQ,SAAd,CAAV;AAKH,OAX6B,CAY9B;;;AACA,YAAMO,IAAI,GAAGxB,aAAa,CAACQ,IAAI,CAACiB,MAAL,CAAYlB,OAAZ,CAAD,CAA1B;AACA,aAAOiB,IAAP;AAd8B;AAejC;;AAtB+B;;AAwBpCrB,sBAAsB,CAACuB,IAAvB,GAA8B,SAASC,8BAAT,CAAwCC,CAAxC,EAA2C;AAAE,SAAO,KAAKA,CAAC,IAAIzB,sBAAV,EAAkCD,EAAE,CAAC2B,QAAH,CAAYC,SAAZ,CAAlC,CAAP;AAAmE,CAA9I;;AACA3B,sBAAsB,CAAC4B,KAAvB,GAA+B,aAAc7B,EAAE,CAAC8B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE9B,sBAAT;AAAiC+B,EAAAA,OAAO,EAAE/B,sBAAsB,CAACuB,IAAjE;AAAuES,EAAAA,UAAU,EAAE;AAAnF,CAAtB,CAA7C","sourcesContent":["import { from, lastValueFrom } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport * as i0 from \"@angular/core\";\r\nexport class AuthInterceptorService {\r\n    constructor(oktaAuth) {\r\n        this.oktaAuth = oktaAuth;\r\n    }\r\n    intercept(request, next) {\r\n        return from(this.handleAccess(request, next));\r\n    }\r\n    async handleAccess(request, next) {\r\n        const theEndpoint = environment.HCLTechStoreUrl + '/orders';\r\n        const securedEndpoints = [theEndpoint];\r\n        if (securedEndpoints.some(url => request.urlWithParams.includes(url))) {\r\n            const accessToken = await this.oktaAuth.getAccessToken();\r\n            console.log(accessToken);\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    Authorization: \"Bearer \" + accessToken\r\n                }\r\n            });\r\n        }\r\n        // return next.handle(request).toPromise();\r\n        const vari = lastValueFrom(next.handle(request));\r\n        return vari;\r\n    }\r\n}\r\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) { return new (t || AuthInterceptorService)(i0.ɵɵinject(OKTA_AUTH)); };\r\nAuthInterceptorService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthInterceptorService, factory: AuthInterceptorService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}