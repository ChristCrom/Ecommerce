{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./product.service\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor(productService) {\n      this.productService = productService;\n      this.cartItems = [];\n      this.totalPrice = new BehaviorSubject(0);\n      this.totalQuantity = new BehaviorSubject(0);\n      this.storage = sessionStorage;\n      let data = JSON.parse(this.storage.getItem('cartItems'));\n\n      if (data != null) {\n        this.cartItems = data;\n        this.computerCartTotals();\n      }\n    }\n\n    decrementQuanitity(theCartItem) {\n      theCartItem.quantity--;\n      theCartItem.unitsInStock++;\n\n      if (theCartItem.quantity === 0) {\n        this.remove(theCartItem);\n      } else {\n        this.computerCartTotals();\n      }\n    }\n\n    remove(theCartItem) {\n      const itemIndex = this.cartItems.findIndex(tempCartItem => tempCartItem.id === theCartItem.id);\n\n      if (itemIndex > -1) {\n        this.cartItems.splice(itemIndex, 1);\n        this.computerCartTotals();\n      }\n    }\n\n    addToCart(theCartItem) {\n      let alreadyExistsInCart = false;\n      let exisitingCartItem = undefined;\n\n      if (this.cartItems.length > 0) {\n        exisitingCartItem = this.cartItems.find(tempCartItem => tempCartItem.id === theCartItem.id);\n        alreadyExistsInCart = exisitingCartItem != undefined;\n      }\n\n      if (alreadyExistsInCart) {\n        exisitingCartItem.quantity++;\n        exisitingCartItem.unitsInStock--;\n      } else {\n        this.cartItems.push(theCartItem);\n      }\n\n      this.productService.getProduct(exisitingCartItem.id).subscribe(result => {\n        this.stock = result.unitsInStock;\n      });\n\n      if (this.stock - exisitingCartItem.quantity < 0) {\n        exisitingCartItem.quantity = this.stock;\n        alert(`There are either no more items left in stock or you have the whole quantity of stock of that item in your cart!`);\n      }\n\n      this.computerCartTotals();\n    }\n\n    computerCartTotals() {\n      let totalPriceValue = 0;\n      let totalQuantityValue = 0;\n\n      for (let currentCartItem of this.cartItems) {\n        totalPriceValue += currentCartItem.quantity * currentCartItem.unitPrice;\n        totalQuantityValue += currentCartItem.quantity;\n      }\n\n      this.totalPrice.next(totalPriceValue);\n      this.totalQuantity.next(totalQuantityValue);\n      this.logCartData(totalPriceValue, totalQuantityValue);\n      this.persistCartItems();\n    }\n\n    persistCartItems() {\n      this.storage.setItem('cartItems', JSON.stringify(this.cartItems));\n    }\n\n    logCartData(totalPriceValue, totalQuantityValue) {\n      console.log('contents of the cart');\n\n      for (let tempCartItem of this.cartItems) {\n        const subTotalPrice = tempCartItem.quantity * tempCartItem.unitPrice;\n        console.log(`name: ${tempCartItem.name}, quantity=${tempCartItem.quantity}, subtotalprice=${subTotalPrice}`);\n      }\n\n      console.log(`totalPrice: ${totalPriceValue.toFixed(2)}, totalQuantity: ${totalQuantityValue}`);\n      console.log('----------');\n    }\n\n  }\n\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)(i0.ɵɵinject(i1.ProductService));\n  };\n\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module"}